// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/cypherium/go-cypherium/common"
	"github.com/cypherium/go-cypherium/common/hexutil"
)

// MarshalJSON marshals as JSON.
func (k KeyBlockHeader) MarshalJSON() ([]byte, error) {
	type KeyBlockHeader struct {
		Version       string        `json:"version"          gencodec:"required"`
		ParentHash    common.Hash   `json:"parentHash"       gencodec:"required"`
		Difficulty    *hexutil.Big  `json:"difficulty"       gencodec:"required"`
		Number        *hexutil.Big  `json:"number"           gencodec:"required"`
		Time          *hexutil.Big  `json:"time"        	 	gencodec:"required"`
		BlockType     uint8         `json:"blockType"              gencodec:"required"`
		Extra         hexutil.Bytes `json:"extraData"        gencodec:"required"`
		CommitteeHash common.Hash   `json:"committeeHash"       gencodec:"required"`
		MixDigest     common.Hash   `json:"mixHash"          gencodec:"required"`
		Nonce         BlockNonce    `json:"nonce"            gencodec:"required"`
		T_Number      uint64
		Hash          common.Hash `json:"hash"`
	}
	var enc KeyBlockHeader
	enc.Version = k.Version
	enc.ParentHash = k.ParentHash
	enc.Difficulty = (*hexutil.Big)(k.Difficulty)
	enc.Number = (*hexutil.Big)(k.Number)
	enc.Time = (*hexutil.Big)(k.Time)
	enc.BlockType = k.BlockType
	enc.Extra = k.Extra
	enc.CommitteeHash = k.CommitteeHash
	enc.MixDigest = k.MixDigest
	enc.Nonce = k.Nonce
	enc.T_Number = k.T_Number
	enc.Hash = k.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (k *KeyBlockHeader) UnmarshalJSON(input []byte) error {
	type KeyBlockHeader struct {
		Version       *string        `json:"version"          gencodec:"required"`
		ParentHash    *common.Hash   `json:"parentHash"       gencodec:"required"`
		Difficulty    *hexutil.Big   `json:"difficulty"       gencodec:"required"`
		Number        *hexutil.Big   `json:"number"           gencodec:"required"`
		Time          *hexutil.Big   `json:"time"        	 	gencodec:"required"`
		BlockType     *uint8         `json:"blockType"              gencodec:"required"`
		Extra         *hexutil.Bytes `json:"extraData"        gencodec:"required"`
		CommitteeHash *common.Hash   `json:"committeeHash"       gencodec:"required"`
		MixDigest     *common.Hash   `json:"mixHash"          gencodec:"required"`
		T_Number      *uint64
		Nonce         *BlockNonce `json:"nonce"            gencodec:"required"`
	}
	var dec KeyBlockHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Version == nil {
		return errors.New("missing required field 'version' for KeyBlockHeader")
	}
	k.Version = *dec.Version
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for KeyBlockHeader")
	}
	k.ParentHash = *dec.ParentHash
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for KeyBlockHeader")
	}
	k.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for KeyBlockHeader")
	}
	k.Number = (*big.Int)(dec.Number)
	if dec.Time != nil {
		k.Time = (*big.Int)(dec.Time)
	}
	if dec.BlockType == nil {
		return errors.New("missing required field 'blockType' for KeyBlockHeader")
	}
	k.BlockType = *dec.BlockType
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for KeyBlockHeader")
	}
	k.Extra = *dec.Extra
	if dec.CommitteeHash == nil {
		return errors.New("missing required field 'committeeHash' for KeyBlockHeader")
	}
	k.CommitteeHash = *dec.CommitteeHash
	if dec.MixDigest == nil {
		return errors.New("missing required field 'mixHash' for KeyBlockHeader")
	}
	k.MixDigest = *dec.MixDigest
	if dec.Nonce == nil {
		return errors.New("missing required field 'nonce' for KeyBlockHeader")
	}
	k.T_Number = *dec.T_Number
	k.Nonce = *dec.Nonce

	return nil
}
